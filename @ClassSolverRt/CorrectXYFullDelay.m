function [mu_xy_corr, sigma_xy_corr] = CorrectXYFullDelay(this, ...
    mu_x, sigma_x, mu_y, sigma_y, mu_z, sigma_z, jacobian_z, odoinfo)
%CORRECTXYFULL correct XY based on Z in full calibration

%% init
mu_xy = [mu_x; mu_y];
sigma_xy = blkdiag(sigma_x, sigma_y);

qx_c_b = mu_x(1); qy_c_b = mu_x(2); qz_c_b = mu_x(3); qw_c_b = mu_x(4);
x_c_b = mu_x(5); y_c_b = mu_x(6);
dt = mu_x(7);
% x_b2_b1 = mu_y(1); y_b2_b1 = mu_y(2); theta_b2_b1 = mu_y(3);
x_m_c1 = mu_y(4); y_m_c1 = mu_y(5); z_m_c1 = mu_y(6);
x_m_c2 = mu_y(7); y_m_c2 = mu_y(8); z_m_c2 = mu_y(9);

ps2_o_b1 = odoinfo.ps2_o_b1;
ps2_o_b2 = odoinfo.ps2_o_b2;
vps2_o_b1 = odoinfo.vps2_o_b1;
vps2_o_b2 = odoinfo.vps2_o_b2;

% temporal offset
ps2d_b2_b1 = FunRelPos2d( ps2_o_b1+dt*vps2_o_b1, ps2_o_b2+dt*vps2_o_b2 );
x_b2_b1 = ps2d_b2_b1(1); y_b2_b1 = ps2d_b2_b1(2); theta_b2_b1 = ps2d_b2_b1(3);

%% constraint value with mean
f_mu =  [x_c_b - x_b2_b1 - x_m_c1*(qw_c_b^2 - qx_c_b^2 - qy_c_b^2 + qz_c_b^2) - x_c_b*cos(theta_b2_b1) + y_m_c1*(2*qw_c_b*qx_c_b + 2*qy_c_b*qz_c_b) + z_m_c1*(2*qw_c_b*qy_c_b - 2*qx_c_b*qz_c_b) + y_c_b*sin(theta_b2_b1) + z_m_c2*(2*qx_c_b*qz_c_b*cos(theta_b2_b1) - 2*qw_c_b*qy_c_b*cos(theta_b2_b1) + 2*qw_c_b*qz_c_b*sin(theta_b2_b1) + 2*qx_c_b*qy_c_b*sin(theta_b2_b1)) - x_m_c2*(sin(theta_b2_b1)*(2*qw_c_b*qx_c_b - 2*qy_c_b*qz_c_b) - cos(theta_b2_b1)*(qw_c_b^2 - qx_c_b^2 - qy_c_b^2 + qz_c_b^2)) - y_m_c2*(cos(theta_b2_b1)*(2*qw_c_b*qx_c_b + 2*qy_c_b*qz_c_b) + sin(theta_b2_b1)*(qw_c_b^2 - qx_c_b^2 + qy_c_b^2 - qz_c_b^2));...
    y_c_b - y_b2_b1 - y_m_c1*(qw_c_b^2 - qx_c_b^2 + qy_c_b^2 - qz_c_b^2) - y_c_b*cos(theta_b2_b1) - 2*x_m_c1*(qw_c_b*qx_c_b - qy_c_b*qz_c_b) + z_m_c1*(2*qw_c_b*qz_c_b + 2*qx_c_b*qy_c_b) - x_c_b*sin(theta_b2_b1) - z_m_c2*(2*qw_c_b*qz_c_b*cos(theta_b2_b1) + 2*qx_c_b*qy_c_b*cos(theta_b2_b1) + 2*qw_c_b*qy_c_b*sin(theta_b2_b1) - 2*qx_c_b*qz_c_b*sin(theta_b2_b1)) + x_m_c2*(cos(theta_b2_b1)*(2*qw_c_b*qx_c_b - 2*qy_c_b*qz_c_b) + sin(theta_b2_b1)*(qw_c_b^2 - qx_c_b^2 - qy_c_b^2 + qz_c_b^2)) - y_m_c2*(sin(theta_b2_b1)*(2*qw_c_b*qx_c_b + 2*qy_c_b*qz_c_b) - cos(theta_b2_b1)*(qw_c_b^2 - qx_c_b^2 + qy_c_b^2 - qz_c_b^2));...
    qw_c_b^2*z_m_c1 - qw_c_b^2*z_m_c2 + qx_c_b^2*z_m_c1 - qx_c_b^2*z_m_c2 - qy_c_b^2*z_m_c1 + qy_c_b^2*z_m_c2 - qz_c_b^2*z_m_c1 + qz_c_b^2*z_m_c2 + 2*qw_c_b*qy_c_b*x_m_c1 - 2*qw_c_b*qy_c_b*x_m_c2 + 2*qx_c_b*qz_c_b*x_m_c1 - 2*qx_c_b*qz_c_b*x_m_c2 + 2*qw_c_b*qz_c_b*y_m_c1 - 2*qx_c_b*qy_c_b*y_m_c1 - 2*qw_c_b*qz_c_b*y_m_c2 + 2*qx_c_b*qy_c_b*y_m_c2;...
    qw_c_b^2 + qx_c_b^2 + qy_c_b^2 + qz_c_b^2 - 1];

%% generate information matrix omega
omega_1 = inv(sigma_xy);
omega_2 = jacobian_z.'*inv(sigma_z)*jacobian_z;
xi_1 = zeros(16,1);
xi_2 = ((-f_mu-mu_z).'*inv(sigma_z)*jacobian_z).';

omega_dxy_corr = omega_1+omega_2;
xi_dxy_corr = xi_1+xi_2;

sigma_dxy_corr = inv(omega_dxy_corr);
mu_dxy_corr = sigma_dxy_corr*xi_dxy_corr;

mu_xy_corr = mu_dxy_corr + mu_xy;
sigma_xy_corr = sigma_dxy_corr;

%% propagation
% additional step, represent the error generated by linearization around
% different point.

sigma_dq_corr = sigma_xy_corr(1:4, 1:4);
sigma_dl_corr = sigma_xy_corr(5:6, 5:6);
sigma_dt_corr = sigma_xy_corr(7,7);

% dist_dq = norm(mu_dxy_corr(1:4));
% eig_dq = sqrt(eig(sigma_dq_corr));
% if dist_dq > max(eig_dq)*1.5 && dist_dq > 0.03 && min(eig_dq) < 3
%     sigma_dq = (1*dist_dq)^2*eye(4);
%     sigma_xy_corr(1:4,1:4) = sigma_dq_corr + sigma_dq;
% end

% dist_dl = norm(mu_dxy_corr(5:6));
% eig_dl = sqrt(eig(sigma_dl_corr));
% if dist_dl > max(eig_dl)*3 && dist_dl > 100 && min(eig_dl) < 300
%     sigma_dl = (dist_dl)^2*eye(2);
%     sigma_xy_corr(5:6,5:6) = sigma_xy_corr(5:6,5:6) + sigma_dl;
% end

% for debug

dist_dq = norm(mu_dxy_corr(1:4));
eig_dq = sqrt(eig(sigma_dq_corr));
if dist_dq > max(eig_dq)*1.5 && dist_dq > 0.03 && min(eig_dq) < 3
    sigma_dq = (dist_dq)^2*eye(4);
    sigma_xy_corr(1:4,1:4) = sigma_dq_corr + sigma_dq;
end

dist_dl = norm(mu_dxy_corr(5:6));
eig_dl = sqrt(eig(sigma_dl_corr));
if dist_dl > max(eig_dl)*3 && dist_dl > 100 && min(eig_dl) < 300
    sigma_dl = (dist_dl)^2*eye(2);
    sigma_xy_corr(5:6,5:6) = sigma_xy_corr(5:6,5:6) + sigma_dl;
end

% dist_dt = norm(mu_dxy_corr(7));
% if dist_dt > 1*sqrt(sigma_dt_corr) && dist_dt > 1e-3
%     sigma_dt = dist_dt^2;
%     sigma_xy_corr(7,7) = sigma_xy_corr(7,7) + sigma_dt;
% end
% if sigma_dt_corr < 1e-4
%     sigma_xy_corr(7,7) = 1e-4;
% end

end

